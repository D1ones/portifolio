// Seleciona o bot√£o de altern√¢ncia de tema e o elemento <html>
const themeToggle = document.querySelector('.theme-toggle');
const rootElement = document.documentElement;

// Adiciona um evento de clique ao bot√£o
themeToggle.addEventListener('click', () => {
    // Alterna a classe 'dark-theme' no elemento <html>
    const isDarkTheme = rootElement.classList.toggle('dark-theme');

    // Atualiza o √≠cone do bot√£o com base no tema
    themeToggle.textContent = isDarkTheme ? 'üåû' : 'üåì';

    // Salva a prefer√™ncia do usu√°rio no localStorage
    localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');
});

// Aplica o tema salvo no localStorage ao carregar a p√°gina
const savedTheme = localStorage.getItem('theme');
if (savedTheme === 'dark') {
    rootElement.classList.add('dark-theme');
    themeToggle.textContent = 'üåû'; // Define o √≠cone para o modo claro
} else {
    themeToggle.textContent = 'üåì'; // Define o √≠cone para o modo escuro
}

// Fun√ß√£o para remover o bot√£o de altern√¢ncia de tema
const removeButton = () => {
    themeToggle.remove();
};

// Adiciona um evento de clique ao bot√£o para remov√™-lo
themeToggle.addEventListener('contextmenu', (event) => {
    event.preventDefault(); // Evita o menu de contexto padr√£o
    removeButton();
});

// Remove o cont√™iner de introdu√ß√£o ap√≥s a anima√ß√£o
window.addEventListener('load', () => {
    const introAnimation = document.querySelector('.intro-animation');
    setTimeout(() => {
        introAnimation.remove();
    }, 4000); // Tempo total da anima√ß√£o (3s + 1s de fadeOut)
});
